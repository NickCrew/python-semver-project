[tool.poetry]
name = "modern_python_project_template"
version = "0.0.1"
description = "This is a template repository for Python projects that use Poetry for their dependency management."
authors = ["Nick Ferguson <me@nickferguson.dev>"]
repository = "https://github.com/NickCrew/modern-python-project-template"
documentation = "https://NickCrew.github.io/modern-python-project-template/"
readme = "README.md"
packages = [
  {include = "modern_python_project_template"}
]
include = [
  "README.md",
  "CHANGELOG.md"
]

[tool.poetry.dependencies]
python = ">=3.8,<4.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.2.0"
pytest-cov = "^4.0.0"
mypy = "^1.5.1"
pre-commit = "^3.4.0"
tox = "^4.11.1"
python-semantic-release = "^8.3.0"

[tool.poetry.group.docs.dependencies]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120
target-version = ['py37']
preview = true

[tool.mypy]
files = ["modern_python_project_template"]
disallow_untyped_defs = "True"
disallow_any_unimported = "True"
no_implicit_optional = "True"
check_untyped_defs = "True"
warn_return_any = "True"
warn_unused_ignores = "True"
show_error_codes = "True"

[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.ruff]
target-version = "py37"
line-length = 120
fix = true
select = [
    # flake8-2020
    # "YTT",
    # flake8-bandit
    # "S",
    # flake8-bugbear
    # "B",
    # flake8-builtins
    # "A",
    # flake8-comprehensions
    # "C4",
    # flake8-debugger
    # "T10",
    # flake8-simplify
    # "SIM",
    # isort
    # "I",
    # mccabe
    # "C90",
    # pycodestyle
    "E", "W",
    # pyflakes
    "F",
    # pygrep-hooks
    # "PGH",
    # pyupgrade
    # "UP",
    # ruff
    # "RUF",
    # tryceratops
    # "TRY",
    # Pydocstyle
    # "D",
    # isort
    "I001"
]
ignore = [
    # LineTooLong
    "E501",
    # DoNotAssignLambda
    "E731",
    "E501"
]

[tool.coverage.report]
skip_empty = true

[tool.coverage.run]
branch = true
source = ["modern_python_project_template"]


[tool.ruff.per-file-ignores]
"tests/*" = ["S101"]

[tool.semantic_release]
version_variable = [
    "txsensorops/__init__.py:__version__"
]
version_toml = [
    "pyproject.toml:tool.poetry.version"
]
version_pattern = [
    "README.md:rev: v{version}",
    "CONTRIBUTING.md:txsensorops, version {version}"
]
branch = "main"
upload_to_PyPI = false
upload_to_release = true
build_command = "poetry build"

assets = []
commit_message = "{version}\n\nAutomatically generated by python-semantic-release"
commit_parser = "angular"
logging_use_named_masks = false
major_on_zero = true
tag_format = "v{version}"

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.changelog]
template_dir = "templates"
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = []

[tool.semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = false
lstrip_blocks = false
newline_sequence = "\n"
keep_trailing_newline = false
extensions = []
autoescape = true

[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "semantic-release <semantic-release>"

[tool.semantic_release.commit_parser_options]
allowed_tags = ["build", "chore", "ci", "docs", "feat", "fix", "perf", "style", "refactor", "test"]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]

[tool.semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = false

[tool.semantic_release.remote.token]
env = "GH_TOKEN"

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true
